class TabsyUIController {
  constructor(root) { this.root=root; this.state={tabs:[],filtered:[],selected:new Set(),groups:[],search:''}; }
  async init(){ await this.mount(); await this.loadData(); this.bind(); this.render(); }
  async mount(){ const html=await (await fetch(chrome.runtime.getURL('ui/forest.html'))).text(); this.root.innerHTML=html; this.cache(); }
  cache(){ const q=id=>this.root.querySelector('#'+id); ['tab-search','tab-list','tab-list-empty','group-list','group-list-empty','group-name','save-group','clean-tabs','refresh-tabs'].forEach(i=>this[i]=q(i)); this.totalEl=this.root.querySelector('#totalTabs'); this.selEl=this.root.querySelector('#selectedTabs'); this.toastContainer=this.root.querySelector('#toast-container')||document.getElementById('toast-container'); }
  bind(){ this['tab-search']?.addEventListener('input',e=>{this.state.search=e.target.value.toLowerCase().trim(); this.filterTabs();}); this['refresh-tabs']?.addEventListener('click',()=>this.reloadTabs()); this['clean-tabs']?.addEventListener('click',()=>this.cleanTabs()); this['save-group']?.addEventListener('click',()=>this.saveGroup()); this['group-name']?.addEventListener('input',()=>this.updateSaveBtn()); }
  async loadData(){ await Promise.all([this.reloadTabs(), this.loadGroups()]); }
  async reloadTabs(){ this.state.tabs=await chrome.tabs.query({}); this.filterTabs(); }
  filterTabs(){ const term=this.state.search; this.state.filtered= term? this.state.tabs.filter(t=> (t.title||'').toLowerCase().includes(term)||(t.url||'').toLowerCase().includes(term)) : [...this.state.tabs]; this.renderTabs(); this.pruneSelection(); this.updateCounts(); this.updateSaveBtn(); }
  pruneSelection(){ [...this.state.selected].forEach(id=>{ if(!this.state.filtered.some(t=>t.id===id)) this.state.selected.delete(id); }); }
  async loadGroups(){ this.state.groups=await GroupsStorage.getAll(); this.renderGroups(); }
  async cleanTabs(){ await TabUtils.cleanTabs(); await this.reloadTabs(); this.state.selected.clear(); this.showToast('Cleaned','success'); }
  toggleTab(id){ this.state.selected.has(id)? this.state.selected.delete(id):this.state.selected.add(id); this.updateSelectionStyles(); this.updateCounts(); this.updateSaveBtn(); }
  updateSelectionStyles(){ this['tab-list']?.querySelectorAll('.tab-card').forEach(card=>{ const id=Number(card.dataset.id); card.classList.toggle('selected', this.state.selected.has(id)); }); this.selEl.textContent=this.state.selected.size; }
  renderTabs(){ const list=this['tab-list']; const empty=this['tab-list-empty']; if(!list) return; list.innerHTML=''; if(this.state.filtered.length===0){ empty.style.display='block'; return;} empty.style.display='none'; this.state.filtered.forEach(tab=>{ const card=document.createElement('article'); card.className='tab-card'; card.dataset.id=tab.id; card.innerHTML=`<div class="select"></div><div class="favicon">${(tab.title||' ')[0]||'?'} </div><div><div class="tab-title">${tab.title||'Untitled'}</div><div class="tab-url">${this.shortUrl(tab.url)}</div></div>`; card.addEventListener('click',()=>this.toggleTab(tab.id)); list.appendChild(card); }); this.updateSelectionStyles(); }
  renderGroups(){ const list=this['group-list']; const empty=this['group-list-empty']; if(!list) return; list.innerHTML=''; if(this.state.groups.length===0){ empty.style.display='block'; return;} empty.style.display='none'; this.state.groups.forEach(g=>{ const det=document.createElement('details'); det.className='group'; det.innerHTML=`<summary><span class="group-name">${g.name}</span><div class="group-controls"><button class="btn" data-act="rename">Rename</button><button class="btn" data-act="update">Update</button><button class="btn" data-act="restore">Restore</button><button class="btn" data-act="delete" style="color:var(--danger);border-color:#5b2a2a;">Delete</button></div></summary><div class="group-body"><div class="tabs-list">${g.urls.slice(0,20).map(u=>`<div class=\"row\"><div class=\"favicon\">${this.firstChar(u)}</div><div><div class=\"title\">${this.shortUrl(u)}</div><div class=\"url\">${u}</div></div><span class=\"subtle\">—</span></div>`).join('')}</div></div>`; det.querySelectorAll('button').forEach(btn=>btn.addEventListener('click',e=>{ e.stopPropagation(); this.handleGroupAction(btn.dataset.act,g); })); list.appendChild(det); }); }
  async handleGroupAction(act,g){ if(act==='restore'){ await GroupsStorage.restore(g.name); this.showToast('Restored','success'); setTimeout(()=>this.reloadTabs(),400);} else if(act==='delete'){ if(confirm('Delete group '+g.name+'?')){ await GroupsStorage.delete(g.name); await this.loadGroups(); this.showToast('Deleted','success'); }} else if(act==='rename'){ const nn=prompt('New name',g.name); if(nn&&nn!==g.name){ await GroupsStorage.rename(g.name,nn); await this.loadGroups(); this.showToast('Renamed','success'); }} else if(act==='update'){ const urls=[...this.state.selected].map(id=> this.state.tabs.find(t=>t.id===id)?.url).filter(Boolean); await GroupsStorage.save(g.name, urls); await this.loadGroups(); this.showToast('Updated','success'); } }
  async saveGroup(){ const name=this['group-name'].value.trim(); if(!name){ this.showToast('Name required','error'); return;} if(this.state.selected.size===0){ this.showToast('No tabs selected','error'); return;} const urls=[...this.state.selected].map(id=> this.state.tabs.find(t=>t.id===id)?.url).filter(Boolean); await GroupsStorage.save(name, urls); this['group-name'].value=''; this.state.selected.clear(); await this.loadGroups(); this.renderTabs(); this.showToast('Saved','success'); }
  updateCounts(){ this.totalEl.textContent=this.state.tabs.length; this.selEl.textContent=this.state.selected.size; }
  updateSaveBtn(){ const btn=this['save-group']; if(btn) btn.disabled=!(this['group-name'].value.trim() && this.state.selected.size>0); }
  showToast(msg,type='info'){ const c=this.toastContainer||document.body.appendChild(Object.assign(document.createElement('div'),{id:'toast-container',className:'toasts'})); const el=document.createElement('div'); el.className='toast '+type; el.textContent=msg; c.appendChild(el); setTimeout(()=>el.remove(),2500); }
  shortUrl(u){ if(!u) return ''; try{return (new URL(u)).hostname;}catch{return u.length>40?u.slice(0,40)+'…':u;} }
  firstChar(u){ return (this.shortUrl(u)[0]||'?').toUpperCase(); }
  render(){ this.renderTabs(); this.renderGroups(); }
}
window.TabsyUIController=TabsyUIController;